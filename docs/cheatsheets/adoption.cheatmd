# Adoption Cheatsheet

Convert your project to `Matcha` quickly! For a more in-depth description of how to move your project over, see the [adoption guide](guide-adoption.html).

> **SUMMARY**
>
> At a high level, you will want to:
>
> - [Choose a `Matcha.Context`](#choosing-a-matcha-context) for your specs
> - [Build a `Matcha.Spec`](#creating-matcha-spec-structs) in that context
> - [Use that spec](#using-matcha-specs) in the corresponding `Matcha` APIs

## Choosing a `Matcha.Context`

### The `:table` context

Use the `:table` context if you need to query data with any of the [`Matcha.Table`](https://hexdocs.pm/matcha/Matcha.Table.html) functions,
or to pass a `Matcha.Spec.raw/1` spec to:

- [`:ets`](https://www.erlang.org/doc/man/ets) functions
- [`:dets`](https://www.erlang.org/doc/man/dets) functions
- [`:mnesia`](https://www.erlang.org/doc/man/mnesia) functions

```elixir
require Matcha
matcha_spec = Matcha.spec(:table) do
  { x, y } = z when x > 10 -> z
end
```

### The `:trace` context

Use the `:trace` context if you need to trace execution in running systems with [`Matcha.Trace`](https://hexdocs.pm/matcha/Matcha.Trace.html) functions,
or to pass a `Matcha.Spec.raw/1` spec to:

- [`:erlang.trace_pattern/3`](https://www.erlang.org/doc/man/erlang#trace_pattern-3)
- [`:dbg`](https://www.erlang.org/doc/man/dbg) functions
- [`:recon_trace`](https://ferd.github.io/recon/recon_trace) functions

```elixir
require Matcha
matcha_spec = Matcha.spec(:trace) do
  [_, 2] -> true
end
```

### Other contexts

Use the (default) `:filter_map` or `:match` contexts if you intend to play with specs and in-memory data
using the [`Matcha.Spec`](https://hexdocs.pm/matcha/Matcha.Spec.html) functions like:

- [`Matcha.Spec.call/2`](https://hexdocs.pm/matcha/Matcha.Spec.html#call/2)
- [`Matcha.Spec.run/2`](https://hexdocs.pm/matcha/Matcha.Spec.html#run/2)

```elixir
require Matcha
matcha_spec = Matcha.spec(:match) do
  { x, y } = z when x > 10 -> z
end
```

## Creating `Matcha.Spec` structs

### Building Specs With Elixir

`Matcha` provides an Elixir-to-Matcha compiler with the [`Matcha.spec/2`](https://hexdocs.pm/matcha/Matcha.html#spec/2) macro.

```elixir
require Matcha
matcha_spec = Matcha.spec(:table) do
  { x, y } = z when x > 10 -> z
end
```

### Wrapping Raw Specs

You can make existing raw match specs play nice with `Matcha` APIs using [`Matcha.Spec.from_source!/2`](https://hexdocs.pm/matcha/Matcha.Spec.html#from_source!/2)

```elixir
raw_spec = [{{:"$1", :"$2"}, [{:>, :"$1", 10}], [:"$_"]}]
matcha_spec = Matcha.Spec.from_source!(:table, raw_spec)
```

## Using Matcha Specs

### Outside of Matcha

You can always get the raw Erlang source code of a spec with [`Matcha.Spec.raw/1`](https://hexdocs.pm/matcha/Matcha.Spec.html#raw/1).

You can pass this into other APIs that do not support `Matcha`, which will depend on [the context you are using them](#choosing-a-matcha-context).

```elixir
require Matcha
matcha_spec = Matcha.spec(:table) do
  { x, y } = z when x > 10 -> z
end

raw_spec = Matcha.Spec.raw(matcha_spec)
```

### With Matcha APIs

Having adopted `Matcha`, you can elect to switch over to its APIs if you wish.

- Reference the [Tables Cheatsheet](cheatsheet-tables.html) to query tables with `Matcha.Table` APIs.
- Reference the [Tracing Cheatsheet](cheatsheet-tracing.html) to trace runtimes with `Matcha.Trace` APIs.

Or, read through the full [usage guides](guide-usage.html) for a deep dive!
